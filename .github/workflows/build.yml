name: Build

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      push:
        description: 'Push image'
        required: false
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: patchman

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        include:
          - platform_name: linux/amd64
            platform_safe_name: linux_amd64
          - platform_name: linux/arm64
            platform_safe_name: linux_arm64
    steps:
    - uses: actions/checkout@v4

    - uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ matrix.platform_name }}

    - uses: docker/setup-buildx-action@v3

    - name: Define build args
      run: |
        echo "VERSION=$(cat Dockerfile | grep 'ARG PATCHMAN_VERSION' | sed -r 's/.*="(.*)"/\1/')" >> $GITHUB_ENV

    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
            type=semver,pattern={{version}},value=${{ env.VERSION }},enable={{is_default_branch}}
            type=semver,pattern={{major}}.{{minor}},value=${{ env.VERSION }},enable={{is_default_branch}}
            type=semver,pattern={{major}},value=${{ env.VERSION }},enable={{is_default_branch}}
            type=ref,event=pr

    - name: Build and push image
      uses: docker/build-push-action@v5
      id: build
      with:
        outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        platforms: ${{ matrix.platform_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

    - name: Test run Docker Compose
      uses: adambirds/docker-compose-action@v1.3.0
      with:
        compose-file: .github/filesdocker-compose-test.yml
        down-flags: "--volumes"
      env:
        IMAGE: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        IMAGE_PLATFORM: ${{ matrix.platform_name }}
        PWD: ${{ github.workspace }}/.github/files

    - name: Export image digest
      run: |
        mkdir -p /tmp/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests/${digest#sha256:}"

    - name: Upload image digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ matrix.platform_safe_name }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1

  # dedicated manifest merge job which runs after all platform specific build jobs are finished
  # see https://docs.docker.com/build/ci/github-actions/multi-platform/
  # see https://github.com/docker/build-push-action/issues/846
  merge-manifests:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download linux/amd64 image digests
        uses: actions/download-artifact@v4
        with:
          name: digests-linux_amd64
          path: /tmp/digests

      - name: Download linux/arm64 image digests
        uses: actions/download-artifact@v4
        with:
          name: digests-linux_arm64
          path: /tmp/digests

      - uses: docker/setup-buildx-action@v3

      - name: Extract docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect and test new multi-platform image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          docker run --rm ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} version
