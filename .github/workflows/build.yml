name: Build

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      push:
        description: 'Push image [true|false]'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Define build args
      # This is all horrible but it works™️
      run: |
        echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

        if [[ "${{ github.event_name }}" == 'push' || "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
          BRANCH="${GITHUB_REF#refs/heads/}"
        elif [[ "${{ github.event_name }}" == 'pull_request' ]]; then
          BRANCH="pr${{ github.event.number }}"
        fi

        PATCHMAN_VERSION="$(cat Dockerfile | grep 'ARG PATCHMAN_VERSION' | sed -r 's/.*="(.*)"/\1/')"
        if [[ "$BRANCH" == "main" ]]; then
          echo "TAGS=ghcr.io/tigattack/patchman:$PATCHMAN_VERSION,ghcr.io/tigattack/patchman:latest" >> $GITHUB_ENV
        else
          echo "TAGS=ghcr.io/tigattack/patchman:$PATCHMAN_VERSION-$BRANCH" >> $GITHUB_ENV
        fi

    - name: Build & Publish image
      id: docker_build
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event.inputs.push != 'false' }}
        tags: ${{ env.TAGS }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ env.BUILD_DATE }}

    # https://github.com/orgs/community/discussions/26716#discussioncomment-3253034
    - name: Prune untagged images
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.DELETE_PACKAGES_TOKEN }}
        script: |
          const response = await github.request("GET /${{ env.OWNER }}/packages/container/${{ env.PACKAGE_NAME }}/versions",
            { per_page: ${{ env.PER_PAGE }}
          });
          for(version of response.data) {
              if (version.metadata.container.tags.length == 0) {
                  console.log("delete " + version.id)
                  const deleteResponse = await github.request("DELETE /${{ env.OWNER }}/packages/container/${{ env.PACKAGE_NAME }}/versions/" + version.id, { });
                  console.log("status " + deleteResponse.status)
              }
          }
      env:
        OWNER: user
        PACKAGE_NAME: patchman
        PER_PAGE: 100
